{"version":3,"sources":["Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Graph","ticker","interval","highlight","useState","data","setData","info","setInfo","activeInterval","setActiveInterval","useEffect","loadNewData","baseURL","axios","get","then","response","d","prices","map","item","x","y","highestPrice","lowestPrice","Infinity","forEach","element","i","first","formatPrice","current","length","price","Intl","NumberFormat","style","minimumFractionDigits","format","className","stroke","strokeWidth","width","height","padding","top","bottom","left","right","interpolation","App","intervals","label","value","dataInterval","setDataInterval","fonts","font","weights","subsets","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eda98321.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport {\n  VictoryLine,\n} from \"victory\";\nimport axios from \"axios\";\nimport './Graph.scss';\n\nconst Graph = ({ticker, interval, highlight=null}) => {\n  const [data, setData] = useState(null);\n  const [info, setInfo] = useState(null);\n  const [activeInterval, setActiveInterval] = useState(null)\n\n  const paddingVertical = 20;\n  const paddingHorizontal = 6;\n  const paddingBottom = 6;\n  const width = 428;\n  const height = 140;\n\n  useEffect(() => {\n    if (interval !== activeInterval) {\n      loadNewData();\n      setActiveInterval(interval)\n    }\n  }, [interval]);\n\n  const loadNewData = () => {\n    const baseURL = `https://api.coingecko.com/api/v3/coins/${ticker}/market_chart?vs_currency=usd&days=${interval}`;\n    // const baseURL = `https://api.coingecko.com/api/v3/coins/${ticker}/market_chart?vs_currency=usd&interval=daily&days=${interval}`;\n    axios.get(baseURL).then((response) => {\n      let d = response.data.prices.map((item) => ({\n        x: item[0],\n        y: item[1],\n      }));\n      setData(d);\n\n      let highestPrice = 0;\n      let lowestPrice = Infinity;\n\n      response.data.prices.forEach(element => {\n        if (element[1] > highestPrice) {\n          highestPrice = element[1];\n        }\n        if (element[1] < lowestPrice) {\n          lowestPrice = element[1];\n        }\n        // console.log('+ element', element);\n      });\n\n      let i = {\n        first: formatPrice(response.data.prices[0][1]),\n        current: formatPrice(response.data.prices[response.data.prices.length - 1][1]),\n        highestPrice: formatPrice(highestPrice),\n        lowestPrice: formatPrice(lowestPrice)\n      }\n      setInfo(i)\n\n      // console.log('response', response);\n      // console.log('+ i', i);\n    });\n  }\n\n  const formatPrice = (price) => {\n    // console.log('price',parseFloat(price), ((parseFloat(price) < 1) ? 4 : 2));\n    const formatConfig = new Intl.NumberFormat(\"en-US\", {\n      style: \"decimal\",\n      minimumFractionDigits: 4\n    });\n  \n    return formatConfig.format(price);\n  };\n\n  return (\n    <div className=\"graph\">\n      <p className=\"graph-name\"><span className={\"ticker \" + (highlight ? 'highlight' : '')}>{ticker}</span>{' ' + info?.current + ' • H ' + info?.highestPrice + ' • L ' + info?.lowestPrice}</p>\n      <div className=\"graph-holder\">\n        {data && <VictoryLine\n            style={{\n              data: {\n                stroke: \"#fff\",\n                strokeWidth: 1\n              }\n            }}\n            width={width}\n            height={height}\n            padding={{ top: paddingVertical, bottom: paddingBottom, left: paddingHorizontal, right: paddingHorizontal }}\n            interpolation=\"linear\"\n            data={data}\n          />}\n      </div>\n    </div>\n  );\n}\n\nexport default Graph;","import { useState } from \"react\";\nimport GoogleFontLoader from 'react-google-font-loader';\n\nimport { Connection, Keypair, PublicKey } from \"@solana/web3.js\";\nimport { getOrca, OrcaFarmConfig, OrcaPoolConfig } from \"@orca-so/sdk\";\n\nimport Graph from './Graph';\nimport './App.scss';\n\nconst App = () => {\n  const intervals = [\n    {\n      label: \"1D\",\n      value: 1\n    },\n    {\n      label: \"7D\",\n      value: 7\n    },\n    {\n      label: \"1M\",\n      value: 30\n    },\n    {\n      label: \"3M\",\n      value: 90\n    },\n    {\n      label: \"6M\",\n      value: 180\n    }\n  ];\n\n  const [dataInterval, setDataInterval] = useState(intervals[1].value);\n\n  // const connection = new Connection(\"https://api.mainnet-beta.solana.com\", \"singleGossip\");\n  // const orca = getOrca(connection);\n  // const keys = Object.keys(OrcaPoolConfig);\n  // const tokens = [];\n\n  // keys.forEach(item => {\n  //   const pool = orca.getPool(OrcaPoolConfig[item])\n  //   const tokenIDs = pool.poolParams.tokenIds;\n  //   tokens.push({name: pool.poolParams.tokens[tokenIDs[0]].name, id: tokenIDs[0] })\n  //   tokens.push({name: pool.poolParams.tokens[tokenIDs[1]].name, id: tokenIDs[1] })\n  // })\n  // console.log('+++ tokens', tokens);\n\n  // const pk = new PublicKey('JET6zMJWkCN9tpRT2v2jfAmm5VnQFDpUBCyaKojmGtz')\n  // console.log('+++ pk', pk);\n  // connection.getAccountInfo(pk).then(response => {\n  //   console.log('response', response);\n  // })\n\n  return (\n    <>\n      <GoogleFontLoader\n        fonts={[\n          {\n            font: 'Roboto Mono',\n            weights: [400, 700],\n          },\n        ]}\n        subsets={['latin-ext']}\n      />\n      <div className=\"app\">\n        <div className=\"menu-holder\">\n          {intervals.map((interval) => (\n            <button\n              key={interval.value}\n              className={dataInterval === interval.value ? \"active\" : \"inactive\"}\n              onClick={() => setDataInterval(interval.value)}\n            >\n              {interval.label}\n            </button>\n          ))}\n        </div>\n        <p className=\"graph-group-name\">MAIN L1</p>\n        <div className=\"graphs\">\n          <Graph ticker={'bitcoin'} interval={dataInterval} />\n          <Graph ticker={'ethereum'} interval={dataInterval} />\n          <Graph ticker={'solana'} interval={dataInterval} />\n          <Graph ticker={'avalanche-2'} interval={dataInterval} />\n          <Graph ticker={'terra-luna'} interval={dataInterval} />\n          <Graph ticker={'tezos'} interval={dataInterval} />\n        </div>\n        <p className=\"graph-group-name\">SOL ECO</p>\n        <div className=\"graphs\">\n          <Graph ticker={'raydium'} interval={dataInterval} />\n          <Graph ticker={'serum'} interval={dataInterval} />\n          <Graph ticker={'orca'} interval={dataInterval} highlight={true} />\n          <Graph ticker={'samoyedcoin'} interval={dataInterval} />\n          <Graph ticker={'step-finance'} interval={dataInterval} />\n          <Graph ticker={'mango-markets'} interval={dataInterval} />\n        </div>\n        <p className=\"graph-group-name\">ETH ECO</p>\n        <div className=\"graphs\">\n          <Graph ticker={'aave'} interval={dataInterval} />\n          <Graph ticker={'sushi'} interval={dataInterval} />\n          <Graph ticker={'matic-network'} interval={dataInterval} />\n          <Graph ticker={'uniswap'} interval={dataInterval} />\n          <Graph ticker={'curve-dao-token'} interval={dataInterval} />\n          <Graph ticker={'chainlink'} interval={dataInterval} />\n        </div>\n        <p className=\"graph-group-name\">BNB ECO</p>\n        <div className=\"graphs\">\n          <Graph ticker={'binancecoin'} interval={dataInterval} />\n          <Graph ticker={'swipe'} interval={dataInterval} />\n          <Graph ticker={'pancakeswap-token'} interval={dataInterval} />\n          <Graph ticker={'bakerytoken'} interval={dataInterval} />\n          <Graph ticker={'superfarm'} interval={dataInterval} />\n          <Graph ticker={'force-protocol'} interval={dataInterval} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}